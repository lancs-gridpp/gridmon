#!/bin/env python2


## Copyright (c) 2022, Lancaster University
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
##
## 2. Redistributions in binary form must reproduce the above
##    copyright notice, this list of conditions and the following
##    disclaimer in the documentation and/or other materials provided
##    with the distribution.
##
## 3. Neither the name of the copyright holder nor the names of its
##    contributors may be used to endorse or promote products derived
##    from this software without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
## "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
## FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
## COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
## SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.

import subprocess
from SimpleHTTPServer import SimpleHTTPRequestHandler
import SocketServer
import xml
from xml.etree import ElementTree
from datetime import datetime
import time
from pprint import pprint
from getopt import getopt
import sys
import re

def copyfield(dest, dkey, elem, ekey, func=lambda x: x):
    sub = elem.find(ekey)
    if sub is None:
        return False
    dest[dkey] = func(sub.text)
    return True

_qname_pat = re.compile(r"^([^@]+)@(.*)$")

def qsplit(txt):
    global _qname_pat
    m = _qname_pat.match(txt)
    if m is None:
        return (txt, "unk")
    return (m.group(1), m.group(2))

class QStatParser(SimpleHTTPRequestHandler):
    def do_GET(self):
        ## Initialize a structure to hold the data.
        data = { 'jobs': { }, 'queues': { } }

        ## Invoke qstat, and get the output.
        proc = subprocess.Popen(['qstat', '-f', '-urg', '-u', '*', '-xml'],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        out, err = proc.communicate()

        ## Parse the output as XML, and populate the structure.
        tree = ElementTree.fromstring(out)
        proc.wait()
        for elem in tree.find('job_info').findall('job_list'):
            if True:
                continue
            jnum = int(elem.find('JB_job_number').text)
            ent = data['jobs'].setdefault(jnum, { })
            ent['state0'] = elem.attrib.get('state')
            copyfield(ent, 'state1', elem, 'state')
            copyfield(ent, 'prio', elem, 'JAT_prio', float)
            copyfield(ent, 'name', elem, 'JB_name')
            copyfield(ent, 'owner', elem, 'JB_owner')
            copyfield(ent, 'slots', elem, 'slots', int)
            copyfield(ent, 'rrcontr', elem, 'JB_rrcontr', int)
            copyfield(ent, 'wtcontr', elem, 'JB_wtcontr', int)
            copyfield(ent, 'dlcontr', elem, 'JB_dlcontr', int)
            dto = datetime.strptime(elem.find('JB_submission_time').text,
                                    '%Y-%m-%dT%H:%M:%S')
            ent['submission_time'] = time.mktime(dto.timetuple())
            continue
        qinfo = tree.find('queue_info')
        for elem in qinfo.findall('Queue-List'):
            queue = elem.find('name').text
            ent = data['queues'].setdefault(queue, { })
            copyfield(ent, 'qtype', elem, 'qtype')
            copyfield(ent, 'arch', elem, 'arch')
            copyfield(ent, 'slots_used', elem, 'slots_used', int)
            copyfield(ent, 'slots_resv', elem, 'slots_resv', int)
            copyfield(ent, 'slots_total', elem, 'slots_total', int)
            copyfield(ent, 'load_avg', elem, 'load_avg', float)
            #ent['load_avg'] = float(elem.find('load_avg').text)
            state_elem = elem.find('state')
            if state_elem is not None:
                ent['state'] = state_elem.text
                pass
            pos = 0
            for selem in elem.findall('job_list'):
                jnum = int(selem.find('JB_job_number').text)
                ent = data['jobs'].setdefault(jnum, { })
                ent['pos'] = pos
                pos += 1
                ent['state0'] = selem.attrib.get('state')
                copyfield(ent, 'state1', selem, 'state')
                copyfield(ent, 'prio', selem, 'JAT_prio', float)
                copyfield(ent, 'nurg', selem, 'JB_nurg', float)
                copyfield(ent, 'name', selem, 'JB_name')
                copyfield(ent, 'owner', selem, 'JB_owner')
                copyfield(ent, 'slots', selem, 'slots', int)
                telem = selem.find('tasks')
                if telem is not None:
                    ent['tasks'] = int(telem.text)
                    pass
                copyfield(ent, 'rrcontr', selem, 'JB_rrcontr', int)
                copyfield(ent, 'wtcontr', selem, 'JB_wtcontr', int)
                copyfield(ent, 'dlcontr', selem, 'JB_dlcontr', int)
                ent['queue'] = queue
                dto = datetime.strptime(selem.find('JAT_start_time').text,
                                        '%Y-%m-%dT%H:%M:%S')
                ent['start_time'] = time.mktime(dto.timetuple())
                continue
            continue

        ## Prepare an OpenMetrics entity from the data.
        body = ""

        body += "# HELP sge_queue_metadata queue metadata\n"
        # body += "# TYPE sge_queue_metadata info\n"
        for queue, ent in data['queues'].items():
            body += 'sge_queue_metadata'
            body += '{queue="%s",host="%s",qtype="%s",arch="%s"}' % \
                (qsplit(queue) + (ent['qtype'], ent['arch']))
            body += ' 1\n'
            continue

        body += "# HELP sge_queue_slots_used slots used\n"
        body += "# TYPE sge_queue_slots_used gauge\n"
        for queue, ent in data['queues'].items():
            body += 'sge_queue_slots_used'
            body += '{queue="%s",host="%s"} %d\n' % \
                (qsplit(queue) + (ent['slots_used'],))
            continue

        body += "# HELP sge_queue_slots_resv slots reserved\n"
        body += "# TYPE sge_queue_slots_resv gauge\n"
        for queue, ent in data['queues'].items():
            body += 'sge_queue_slots_resv'
            body += '{queue="%s",host="%s"} %d\n' % \
                (qsplit(queue) + (ent['slots_resv'],))
            continue

        body += "# HELP sge_queue_slots_total slots in total\n"
        body += "# TYPE sge_queue_slots_total gauge\n"
        for queue, ent in data['queues'].items():
            body += 'sge_queue_slots_total'
            body += '{queue="%s",host="%s"} %d\n' % \
                (qsplit(queue) + (ent['slots_total'],))
            continue

        body += "# HELP sge_queue_load_avg load average\n"
        body += "# TYPE sge_queue_load_avg gauge\n"
        for queue, ent in data['queues'].items():
            if 'load_avg' in ent:
                body += 'sge_queue_load_avg'
                body += '{queue="%s",host="%s"} %.5f\n' % \
                    (qsplit(queue) + (ent['load_avg'],))
                pass
            continue

        body += "# HELP sge_queue_state state\n"
        # body += "# TYPE sge_queue_state info\n"
        for queue, ent in data['queues'].items():
            if 'state' in ent:
                body += 'sge_queue_state'
                body += '{queue="%s",host="%s",qstate="%s"} 1\n' % \
                    (qsplit(queue) + (ent['state'],))
                pass
            continue

        body += "# HELP sge_job_queue_pos position in queue\n"
        body += "# TYPE sge_job_queue_pos gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'queue' in ent:
                body += 'sge_job_queue_pos'
                body += '{queue="%s",host="%s",jnum="%d"} %d\n' % \
                    (qsplit(ent['queue']) + (jnum, ent['pos']))
                pass
            continue

        body += "# HELP sge_job_tasks number of tasks in job\n"
        body += "# TYPE sge_job_tasks gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'tasks' in ent:
                body += 'sge_job_tasks'
                body += '{jnum="%d"} %d\n' % (jnum, ent['tasks'])
                pass
            continue

        body += "# HELP sge_job_rrcontr job rrcontr huh\n"
        body += "# TYPE sge_job_rrcontr gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'rrcontr' in ent:
                body += 'sge_job_rrcontr'
                body += '{jnum="%d"} %d\n' % (jnum, ent['rrcontr'])
                pass
            continue

        body += "# HELP sge_job_wtcontr job wtcontr huh\n"
        body += "# TYPE sge_job_wtcontr gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'wtcontr' in ent:
                body += 'sge_job_wtcontr'
                body += '{jnum="%d"} %d\n' % (jnum, ent['wtcontr'])
                pass
            continue

        body += "# HELP sge_job_dlcontr job dlcontr huh\n"
        body += "# TYPE sge_job_dlcontr gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'dlcontr' in ent:
                body += 'sge_job_dlcontr'
                body += '{jnum="%d"} %d\n' % (jnum, ent['dlcontr'])
                pass
            continue

        body += "# HELP sge_job_submission_time pending job submission time\n"
        body += "# TYPE sge_job_submission_time gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'submission_time' in ent:
                body += 'sge_job_submission_time'
                body += '{jnum="%d"} %d\n' % (jnum, ent['submission_time'])
                pass
            continue

        body += "# HELP sge_job_start_time pending job start time\n"
        body += "# TYPE sge_job_start_time gauge\n"
        for jnum, ent in data['jobs'].items():
            if 'start_time' in ent:
                body += 'sge_job_start_time'
                body += '{jnum="%d"} %d\n' % (jnum, ent['start_time'])
                pass
            continue

        body += "# HELP sge_job_slots number of slots for job\n"
        body += "# TYPE sge_job_slots gauge\n"
        for jnum, ent in data['jobs'].items():
            body += 'sge_job_slots'
            body += '{jnum="%d"} %d\n' % (jnum, ent['slots'])
            continue

        body += "# HELP sge_job_prio number of prio for job\n"
        body += "# TYPE sge_job_prio gauge\n"
        for jnum, ent in data['jobs'].items():
            body += 'sge_job_prio'
            body += '{jnum="%d"} %.5f\n' % (jnum, ent['prio'])
            continue

        body += "# HELP sge_job_metadata job metadata\n"
        # body += "# TYPE sge_job_metadata info\n"
        for jnum, ent in data['jobs'].items():
            body += 'sge_job_metadata'
            body += '{jnum="%d",jname="%s",jowner="%s",short_state="%s",state="%s"}' % \
                (jnum, ent['name'], ent['owner'], ent['state1'], ent['state0'])
            body += ' 1\n'
            continue

        # body += '# EOF\n'

        ## Transmit the data as an HTTP response.
        self.send_response(200)
        # ct = 'application/openmetrics-text; version=1.0.0; charset=utf-8'
        ct = 'text/plain; version=0.0.4; charset=utf-8'
        self.send_header('Content-Type', ct)
        self.end_headers()
        self.wfile.write(body.encode('UTF-8'))
        pass

    pass

http_host = ''
http_port = 9373
opts, args = getopt(sys.argv[1:], "t:T:")
for opt, val in opts:
    if opt == '-t':
        http_port = int(val)
    elif opt == '-T':
        http_host = val
        pass
    continue

webserver = SocketServer.TCPServer((http_host, http_port), QStatParser)
print('Started on http://%s:%s' % (http_host, http_port))

try:
    webserver.serve_forever()
except KeyboardInterrupt:
    pass
finally:
    webserver.shutdown()
    webserver.server_close()
    pass
print('exiting')
