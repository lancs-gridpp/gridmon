#!/bin/env python3

## Copyright (c) 2022, Lancaster University
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
##
## 2. Redistributions in binary form must reproduce the above
##    copyright notice, this list of conditions and the following
##    disclaimer in the documentation and/or other materials provided
##    with the distribution.
##
## 3. Neither the name of the copyright holder nor the names of its
##    contributors may be used to endorse or promote products derived
##    from this software without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
## "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
## FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
## COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
## INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
## SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.

import functools
import sys
from http.server import HTTPServer
from getopt import getopt
import threading
import time
import logging
import traceback

## Local libraries
import perfsonar
import metrics

http_host = "localhost"
http_port = 8732
endpoint = None
horizon = 60 * 30
lag = 20
fore = 0
aft = 60
log_params = {
    'format': '%(asctime)s %(message)s',
    'datefmt': '%Y-%d-%mT%H:%M:%S',
}
opts, args = getopt(sys.argv[1:], "h:t:T:E:S:l:f:a:",
                    [ 'log=', 'log-file=' ])
for opt, val in opts:
    if opt == '-h':
        horizon = int(val) * 60
    elif opt == '-l':
        lag = int(val)
    elif opt == '-f':
        fore = int(val)
    elif opt == '-a':
        aft = int(val)
    elif opt == '-T':
        http_host = val
    elif opt == '-t':
        http_port = int(val)
    elif opt == '-E':
        endpoint = val
    elif opt == '--log':
        log_params['level'] = getattr(logging, val.upper(), None)
        if not isinstance(log_params['level'], int):
            sys.stderr.write('bad log level [%s]\n' % val)
            sys.exit(1)
            pass
        pass
    elif opt == '--log-file':
        log_params['filename'] = val
    elif opt == '-S':
        endpoint = 'https://' + val + '/esmond/perfsonar/archive/'
        pass
    continue

methist = metrics.MetricHistory(perfsonar.schema, horizon=horizon)
perfcoll = perfsonar.PerfsonarCollector(endpoint, lag=lag, fore=fore, aft=aft)
partial_handler = functools.partial(metrics.MetricsHTTPHandler, hist=methist)
webserver = HTTPServer((http_host, http_port), partial_handler)

logging.basicConfig(**log_params)

def check_delay(hist, start):
    if not hist.check():
        return False
    now = int(time.time())
    delay = start - now
    return delay > 0

def keep_polling(hist, coll):
    try:
        while hist.check():
            logging.info('Getting latest data')
            start = int(time.time()) + 30
            new_data = coll.update()
            hist.install(new_data)
            logging.info('Installed')
            while check_delay(hist, start):
                time.sleep(1)
                pass
            continue
    except InterruptedError:
        pass
    except KeyboardInterrupt:
        pass
    logging.info('Polling halted')
    hist.halt()
    pass

poll_thrd = threading.Thread(target=keep_polling, args=(methist, perfcoll))
poll_thrd.start()

try:
    webserver.serve_forever()
except KeyboardInterrupt:
    pass
logging.info('HTTP halted')

methist.halt()
